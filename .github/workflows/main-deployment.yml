name: Main Deployment

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  create-tag:
    name: Create Tag on Main and deploy to Prod
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, 'release/') || contains(github.event.head_commit.message, 'hotfix/')
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v3
        with:
          ref: main
          fetch-depth: 0

      - name: Fetch Tags from Other Repository
        id: fetch_tags
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          REPO_OWNER="p-zywczak"  # Zastąp nazwą organizacji lub użytkownika
          REPO_NAME="demo-repository-2"      # Zastąp nazwą repozytorium

          LATEST_TAG_OTHER_REPO=$(gh api repos/${REPO_OWNER}/${REPO_NAME}/tags --jq '.[0].name | sub("^v"; "")')

          echo "LATEST_TAG_OTHER_REPO=$LATEST_TAG_OTHER_REPO" >> $GITHUB_ENV          

      - name: Extract Version from Commit Message
        id: extract_version
        run: |
          VERSION=$(git log -1 --pretty=%B | grep -oP '(release|hotfix)/\K[0-9]+\.[0-9]+(\.[0-9]+)?' | head -n 1 | tr -d '[:space:]')
          if [ -z "$VERSION" ]; then
          echo "Version not found in commit message."
          exit 1
          fi
          echo "VER=$VERSION" >> $GITHUB_ENV

      - name: Compare and set tag version
        id: compare_versions
        run: |
          echo "Extracted version: $VER"
          echo "Latest tag in other repo: $LATEST_TAG_OTHER_REPO"
          
          SMALLER_VERSION=$(printf '%s\n%s' "${LATEST_TAG_OTHER_REPO}" "${VER}" | sort -V | head -n1)

          if [ "${SMALLER_VERSION}" = "${VER}" ]; then
            echo "Using version from other repo: ${LATEST_TAG_OTHER_REPO}"
            echo "VER=${LATEST_TAG_OTHER_REPO}" >> $GITHUB_ENV
            echo "FROM_OTHER_REPO=true" >> $GITHUB_ENV
          else
            echo "Using version from commit message: ${VER}"
            echo "FROM_OTHER_REPO=false" >> $GITHUB_ENV
          fi
          
      - name: Create Tag on Main
        run: |
          git tag "v${VER}"
          git push origin "v${VER}"

      - name: Create Release Branch
        if: env.FROM_OTHER_REPO == 'true'
        run: |
          echo "Creating release branch for version ${VER} based on the latest release branch."
          git fetch --all
          LATEST_RELEASE_BRANCH=$(git branch -r | grep -E '^[[:space:]]*origin/release/[0-9]+\.[0-9]+\.[0-9]+$' | sed -E 's|^[[:space:]]*origin/release/||' | sort -V | tail -n1)
          echo "Latest release branch found: ${LATEST_RELEASE_BRANCH}"

          if [ -z "${LATEST_RELEASE_BRANCH}" ]; then
            echo "No existing release branch found."
          else
            echo "Latest release branch is release/${LATEST_RELEASE_BRANCH}. Creating release/${VER} from it."
            git checkout -b "release/${VER}" "origin/release/${LATEST_RELEASE_BRANCH}"
          fi
          git push origin "release/${VER}"          

      - name: Get current date
        id: get_date
        run: |
          TZ="Europe/Warsaw" date "+RELEASE_DATE=%Y-%m-%d %H:%M:%S %Z" >> $GITHUB_ENV

      - name: Generate Changelog
        id: generate_changelog
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0)
          
          CHANGELOG=$(git log ${LAST_TAG}..HEAD --pretty=format:"• %s")
          
          if [ -z "$CHANGELOG" ]; then
            CHANGELOG="• Brak zmian."
          fi
          
          echo "CHANGELOG<<EOF" >> $GITHUB_ENV
          echo "$CHANGELOG" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Hotfix merge to develop
        if: contains(github.event.head_commit.message, 'hotfix/')
        run: |
          echo "Commit message: hotfix/${VER}"
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git fetch --all
          git checkout develop
          git pull origin develop
          git merge origin/hotfix/${VER} --no-ff -m "Merge hotfix branch into develop: ${{ env.VER }}"
          git push origin develop
