name: Main Deployment

on:
  push:
    branches:
      - main

permissions: write-all

jobs:
  extract_version:
    name: Extract Version
    runs-on: ubuntu-latest
    outputs:
      ver: ${{ steps.extract.outputs.ver }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Extract Version from Commit Message
        id: extract
        run: |
          VERSION=$(git log -1 --pretty=%B \
            | grep -oP '(release|hotfix)/\K[0-9]+\.[0-9]+\.[0-9]+(\.[0-9]+)?' \
            | head -n1 | tr -d '[:space:]')
          if [ -z "$VERSION" ]; then
            echo "Version not found in commit message." >&2
            exit 1
          fi
          echo "ver=$VERSION" >> $GITHUB_OUTPUT
          
  notification:
    name: 'Notification'
    needs: extract_version
    if: contains(github.event.head_commit.message, 'release/') || contains(github.event.head_commit.message, 'hotfix/')
    env:
      VER: ${{ needs.extract_version.outputs.ver }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get current date
        id: get_date
        run: |
          TZ="Europe/Warsaw" date "+RELEASE_DATE=%Y-%m-%d %H:%M:%S %Z" >> $GITHUB_ENV

      - name: Generate changelog
        id: changelog
        uses: metcalfc/changelog-generator@v4.6.2
        with:
          myToken: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare changelog JSON‑safe
        id: prep_changelog
        run: |
          SAFE=$(printf '%s' "${{ steps.changelog.outputs.changelog }}" | jq -Rs .)
          echo "safe=$SAFE" >> "$GITHUB_OUTPUT"

      - name: Build Teams card
        id: build_card
        run: |
          cat > card.json <<'JSON'
          {
            "type": "message",
            "attachments":[
              {
                "contentType": "application/vnd.microsoft.card.adaptive",
                "content":{
                  "type": "AdaptiveCard",
                  "version": "1.2",
                  "body":[
                    {
                      "type": "ColumnSet",
                      "columns":[
                        {
                          "type": "Column",
                          "width": "stretch",
                          "items":[
                            {
                              "type": "TextBlock",
                              "text": "${{ secrets.ENVIRONMENT }} Release v${{ env.VER }}",
                              "weight": "Bolder",
                              "size": "Large",
                              "color": "Good"
                            }
                          ]
                        },
                        {
                          "type": "Column",
                          "width": "auto",
                          "items":[
                            {
                              "type": "Image",
                              "url": "https://img.icons8.com/color/48/000000/checked--v1.png",
                              "size": "Small",
                              "horizontalAlignment": "Right",
                              "altText": "Zielona Fajka"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "TextBlock",
                      "text": "Najnowsza wersja v${{ env.VER }} została wdrożona na serwery DEMO oraz PROD.",
                      "wrap": true,
                      "size": "Medium"
                    },
                    {
                      "type": "TextBlock",
                      "text": "Data i czas release: ${{ env.RELEASE_DATE }}",
                      "wrap": true,
                      "size": "Small",
                      "color": "Accent"
                    },
                    {
                      "type": "ActionSet",
                      "actions":[
                        {
                          "type": "Action.ToggleVisibility",
                          "title": "Changelog",
                          "targetElements":[ "changelogContainer" ]
                        }
                      ]
                    },
                    {
                      "type": "Container",
                      "id": "changelogContainer",
                      "isVisible": false,
                      "items":[
                        {
                          "type": "TextBlock",
                          "text": "Changelog:",
                          "weight": "Bolder",
                          "size": "Medium"
                        },
                        {
                          "type": "TextBlock",
                          "text": ${{ steps.prep_changelog.outputs.safe }},
                          "wrap": true
                        }
                      ]
                    }
                  ],
                  "actions":[]
                }
              }
            ]
          }
          JSON

      - name: Send card to Microsoft Teams
        run: |
          curl --fail -H "Content-Type: application/json" \
               --data @card.json \
               "${{ secrets.MSTEAMS_WEBHOOK_RELEASE }}"

  create-tag:
    name: Create Tag on Main and deploy to Prod
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, 'release/') || contains(github.event.head_commit.message, 'hotfix/')
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v3
        with:
          ref: main
          fetch-depth: 0

      - name: Extract Version from Commit Message
        id: extract_version
        run: |
          VERSION=$(git log -1 --pretty=%B | grep -oP '(release|hotfix)/\K[0-9]+\.[0-9]+\.[0-9]+(\.[0-9]+)?' | head -n 1 | tr -d '[:space:]')
          if [ -z "$VERSION" ]; then
          echo "Version not found in commit message."
          exit 1
          fi
          echo "VER=$VERSION" >> $GITHUB_ENV

      - name: Manager for maintaining the same version
        uses: ./.github/actions/release-branch-synchronizer
        with:
          token: ${{ secrets.TOKEN_PAT }}
          ver: ${{ env.VER }}
          repo_owner: ${{ vars.REPO_OWNER }}
          repo_name: ${{ vars.REPO_NAME }}
          backend: false



      - name: Check If Release Branch Exists in Other Repo
        id: check_branch_exists
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RELEASE_BRANCH_EXISTS=$(gh api repos/${{ vars.REPO_OWNER }}/${{ vars.REPO_NAME }}/branches --paginate --jq '.[].name' | grep -E "^release/${VER}$" || true)
          
          if [ -n "$RELEASE_BRANCH_EXISTS" ]; then
            echo "Release branch 'release/${VER}' already exists in the other repository."
            echo "CREATE_EMPTY_RELEASE=false" >> $GITHUB_ENV
          else
            echo "Release branch 'release/${VER}' does not exist in the other repository."
            echo "CREATE_EMPTY_RELEASE=true" >> $GITHUB_ENV
          fi          
          
      - name: Fetch Latest Release Branch SHA
        if: env.CREATE_EMPTY_RELEASE == 'true'
        id: fetch_latest_release_sha
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          BRANCHES=$(gh api repos/${{ vars.REPO_OWNER }}/${{ vars.REPO_NAME }}/branches --paginate --jq '.[].name')
          RELEASE_BRANCHES=$(echo "$BRANCHES" | grep -E '^release/[0-9]+\.[0-9]+\.[0-9]+(\.[0-9]+)?$')
      
          if [ -z "$RELEASE_BRANCHES" ]; then
            echo "No release branches found in the other repository."
            exit 1
          else
            LATEST_RELEASE_BRANCH=$(echo "$RELEASE_BRANCHES" | sed 's|release/||' | sort -V | tail -n1)
            echo "Latest release branch: release/${LATEST_RELEASE_BRANCH}"
      
            LATEST_RELEASE_SHA=$(gh api repos/${{ vars.REPO_OWNER }}/${{ vars.REPO_NAME }}/git/refs/heads/release/${LATEST_RELEASE_BRANCH} --jq '.object.sha')
            echo "LATEST_RELEASE_SHA=${LATEST_RELEASE_SHA}" >> $GITHUB_ENV
          fi
          
      - name: Create Tag on Main
        run: |
          git tag "v${VER}"
          git push origin "v${VER}"

      - name: Create Empty Release Branch in Other Repo
        if: env.CREATE_EMPTY_RELEASE == 'true'
        env:
          GH_TOKEN: ${{ secrets.TOKEN_PAT }}
        run: |
          echo "Creating new release branch 'release/${VER}' based on SHA: ${LATEST_RELEASE_SHA}"
          gh api repos/${{ vars.REPO_OWNER }}/${{ vars.REPO_NAME }}/git/refs -X POST \
            -F ref="refs/heads/release/${VER}" \
            -F sha="${LATEST_RELEASE_SHA}" \
            -H "Authorization: token $GH_TOKEN"

          MAIN_SHA=$(gh api repos/${{ vars.REPO_OWNER }}/${{ vars.REPO_NAME }}/git/refs/heads/main --jq '.object.sha')
            echo "Main branch SHA: $MAIN_SHA"
            echo "Creating tag 'v${VER}' on main branch"
            gh api repos/${{ vars.REPO_OWNER }}/${{ vars.REPO_NAME }}/git/refs -X POST \
              -F ref="refs/tags/v${VER}" \
              -F sha="${MAIN_SHA}" \
              -H "Authorization: token $GH_TOKEN"   
              
      - name: Update .version file
        if: env.CREATE_EMPTY_RELEASE == 'true'
        run: |
          REPO="${{ vars.REPO_OWNER }}/${{ vars.REPO_NAME }}"
          BRANCH="release/${VER}"
          FILE_PATH="package.json"
          COMMIT_MESSAGE="chore: update package.json version to v${VER}"
          COMMITTER_NAME="GitHub Action"
          COMMITTER_EMAIL="actions@github.com"
      
          # Pobierz obecny plik package.json
          echo "Fetching current package.json..."
          RESPONSE=$(gh api /repos/$REPO/contents/$FILE_PATH?ref=$BRANCH)
          
          # Pobierz SHA pliku (potrzebne do aktualizacji)
          FILE_SHA=$(echo "$RESPONSE" | jq -r '.sha')
      
          # Dekoduj obecny package.json
          echo "Decoding current package.json..."
          CURRENT_CONTENT=$(echo "$RESPONSE" | jq -r '.content' | base64 -d)
      
          # Zmień wersję w package.json (używamy jq)
          echo "Updating package.json version..."
          UPDATED_CONTENT=$(echo "$CURRENT_CONTENT" | jq --arg VER "$VER" '.version=$VER')
      
          # Zakoduj nowy package.json do base64 (GitHub API wymaga base64)
          ENCODED_CONTENT=$(echo -n "$UPDATED_CONTENT" | base64 -w 0)
      
          # Wykonaj zapytanie do API, aby dodać/zaktualizować plik package.json
          echo "Pushing updated package.json to GitHub..."
          gh api --method PUT \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/$REPO/contents/$FILE_PATH \
            -f message="$COMMIT_MESSAGE" \
            -f content="$ENCODED_CONTENT" \
            -f branch="$BRANCH" \
            -f committer[name]="$COMMITTER_NAME" \
            -f committer[email]="$COMMITTER_EMAIL" \
            -f sha="$FILE_SHA"
        env:
          GH_TOKEN: ${{ secrets.TOKEN_PAT }}      

      - name: Create PR in other repo
        if: env.CREATE_EMPTY_RELEASE == 'true'
        run: |
          REPO="${{ vars.REPO_OWNER }}/${{ vars.REPO_NAME }}"
          gh api --method POST \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/$REPO/pulls \
            -f title="Merge release/${VER} into main" \
            -f body="Automatyczne PR dla wersji ${VER} do gałęzi develop." \
            -f head="release/${VER}" \
            -f base="main"
        env:
          GH_TOKEN: ${{ secrets.TOKEN_PAT }}       
                  
      - name: Get current date
        id: get_date
        run: |
          TZ="Europe/Warsaw" date "+RELEASE_DATE=%Y-%m-%d %H:%M:%S %Z" >> $GITHUB_ENV

      - name: Generate Changelog
        id: generate_changelog
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0)
          
          CHANGELOG=$(git log ${LAST_TAG}..HEAD --pretty=format:"• %s")
          
          if [ -z "$CHANGELOG" ]; then
            CHANGELOG="• Brak zmian."
          fi
          
          echo "CHANGELOG<<EOF" >> $GITHUB_ENV
          echo "$CHANGELOG" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Hotfix merge to develop
        if: contains(github.event.head_commit.message, 'hotfix/')
        run: |
          echo "Commit message: hotfix/${VER}"
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git fetch --all
          git checkout develop
          git pull origin develop
          git merge origin/hotfix/${VER} --no-ff -m "Merge hotfix branch into develop: ${{ env.VER }}"
          git push origin develop

  jira-release:
    name: Mark Release as Released in JIRA
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, 'release/') || contains(github.event.head_commit.message, 'hotfix/')
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v3
        with:
          ref: main
          fetch-depth: 0

      - name: Jira Manager - mark release
        uses: ./.github/actions/jira-manager
        with:
          jira_email: ${{ secrets.JIRA_EMAIL }}
          jira_token: ${{ secrets.JIRA_TOKEN }}
          jira_url: ${{ secrets.JIRA_URL }}
          jira_project_id: ${{ secrets.JIRA_PROJECT_ID }}
          environment: ${{ vars.ENVIRONMENT }}
          commit_message: "${{ github.event.head_commit.message }}"
          type: 'markRelease'
