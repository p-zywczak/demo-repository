name: Main Deployment

on:
  push:
    branches:
      - main

permissions: write-all

jobs:
  create-tag:
    name: Create Tag on Main and deploy to Prod
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, 'release/') || contains(github.event.head_commit.message, 'hotfix/')
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v3
        with:
          ref: main
          fetch-depth: 0

      - name: Extract Version from Commit Message
        id: extract_version
        run: |
          VERSION=$(git log -1 --pretty=%B | grep -oP '(release|hotfix)/\K[0-9]+\.[0-9]+\.[0-9]+(\.[0-9]+)?' | head -n 1 | tr -d '[:space:]')
          if [ -z "$VERSION" ]; then
          echo "Version not found in commit message."
          exit 1
          fi
          echo "VER=$VERSION" >> $GITHUB_ENV

      - name: Testowanie branch creator
        uses: ./.github/actions/release-branch-synchronizer
        with:
          token: ${{ secrets.TOKEN_PAT }}
          ver: ${{ env.VER }}
          repo_owner: ${{ vars.REPO_OWNER }}
          repo_name: ${{ vars.REPO_NAME }}



      - name: Check If Release Branch Exists in Other Repo
        id: check_branch_exists
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RELEASE_BRANCH_EXISTS=$(gh api repos/${{ vars.REPO_OWNER }}/${{ vars.REPO_NAME }}/branches --paginate --jq '.[].name' | grep -E "^release/${VER}$" || true)
          
          if [ -n "$RELEASE_BRANCH_EXISTS" ]; then
            echo "Release branch 'release/${VER}' already exists in the other repository."
            echo "CREATE_EMPTY_RELEASE=false" >> $GITHUB_ENV
          else
            echo "Release branch 'release/${VER}' does not exist in the other repository."
            echo "CREATE_EMPTY_RELEASE=true" >> $GITHUB_ENV
          fi          
          
      - name: Fetch Latest Release Branch SHA
        if: env.CREATE_EMPTY_RELEASE == 'true'
        id: fetch_latest_release_sha
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          BRANCHES=$(gh api repos/${{ vars.REPO_OWNER }}/${{ vars.REPO_NAME }}/branches --paginate --jq '.[].name')
          RELEASE_BRANCHES=$(echo "$BRANCHES" | grep -E '^release/[0-9]+\.[0-9]+\.[0-9]+(\.[0-9]+)?$')
      
          if [ -z "$RELEASE_BRANCHES" ]; then
            echo "No release branches found in the other repository."
            exit 1
          else
            LATEST_RELEASE_BRANCH=$(echo "$RELEASE_BRANCHES" | sed 's|release/||' | sort -V | tail -n1)
            echo "Latest release branch: release/${LATEST_RELEASE_BRANCH}"
      
            LATEST_RELEASE_SHA=$(gh api repos/${{ vars.REPO_OWNER }}/${{ vars.REPO_NAME }}/git/refs/heads/release/${LATEST_RELEASE_BRANCH} --jq '.object.sha')
            echo "LATEST_RELEASE_SHA=${LATEST_RELEASE_SHA}" >> $GITHUB_ENV
          fi
          
      - name: Create Tag on Main
        run: |
          git tag "v${VER}"
          git push origin "v${VER}"

      - name: Create Empty Release Branch in Other Repo
        if: env.CREATE_EMPTY_RELEASE == 'true'
        env:
          GH_TOKEN: ${{ secrets.TOKEN_PAT }}
        run: |
          echo "Creating new release branch 'release/${VER}' based on SHA: ${LATEST_RELEASE_SHA}"
          gh api repos/${{ vars.REPO_OWNER }}/${{ vars.REPO_NAME }}/git/refs -X POST \
            -F ref="refs/heads/release/${VER}" \
            -F sha="${LATEST_RELEASE_SHA}" \
            -H "Authorization: token $GH_TOKEN"

          MAIN_SHA=$(gh api repos/${{ vars.REPO_OWNER }}/${{ vars.REPO_NAME }}/git/refs/heads/main --jq '.object.sha')
            echo "Main branch SHA: $MAIN_SHA"
            echo "Creating tag 'v${VER}' on main branch"
            gh api repos/${{ vars.REPO_OWNER }}/${{ vars.REPO_NAME }}/git/refs -X POST \
              -F ref="refs/tags/v${VER}" \
              -F sha="${MAIN_SHA}" \
              -H "Authorization: token $GH_TOKEN"   
              
      - name: Update .version file
        if: env.CREATE_EMPTY_RELEASE == 'true'
        run: |
          REPO="${{ vars.REPO_OWNER }}/${{ vars.REPO_NAME }}"
          BRANCH="release/${VER}"
          FILE_PATH="package.json"
          COMMIT_MESSAGE="chore: update package.json version to v${VER}"
          COMMITTER_NAME="GitHub Action"
          COMMITTER_EMAIL="actions@github.com"
      
          # Pobierz obecny plik package.json
          echo "Fetching current package.json..."
          RESPONSE=$(gh api /repos/$REPO/contents/$FILE_PATH?ref=$BRANCH)
          
          # Pobierz SHA pliku (potrzebne do aktualizacji)
          FILE_SHA=$(echo "$RESPONSE" | jq -r '.sha')
      
          # Dekoduj obecny package.json
          echo "Decoding current package.json..."
          CURRENT_CONTENT=$(echo "$RESPONSE" | jq -r '.content' | base64 -d)
      
          # Zmień wersję w package.json (używamy jq)
          echo "Updating package.json version..."
          UPDATED_CONTENT=$(echo "$CURRENT_CONTENT" | jq --arg VER "$VER" '.version=$VER')
      
          # Zakoduj nowy package.json do base64 (GitHub API wymaga base64)
          ENCODED_CONTENT=$(echo -n "$UPDATED_CONTENT" | base64 -w 0)
      
          # Wykonaj zapytanie do API, aby dodać/zaktualizować plik package.json
          echo "Pushing updated package.json to GitHub..."
          gh api --method PUT \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/$REPO/contents/$FILE_PATH \
            -f message="$COMMIT_MESSAGE" \
            -f content="$ENCODED_CONTENT" \
            -f branch="$BRANCH" \
            -f committer[name]="$COMMITTER_NAME" \
            -f committer[email]="$COMMITTER_EMAIL" \
            -f sha="$FILE_SHA"
        env:
          GH_TOKEN: ${{ secrets.TOKEN_PAT }}      

      - name: Create PR in other repo
        if: env.CREATE_EMPTY_RELEASE == 'true'
        run: |
          REPO="${{ vars.REPO_OWNER }}/${{ vars.REPO_NAME }}"
          gh api --method POST \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/$REPO/pulls \
            -f title="Merge release/${VER} into main" \
            -f body="Automatyczne PR dla wersji ${VER} do gałęzi develop." \
            -f head="release/${VER}" \
            -f base="main"
        env:
          GH_TOKEN: ${{ secrets.TOKEN_PAT }}       
                  
      - name: Get current date
        id: get_date
        run: |
          TZ="Europe/Warsaw" date "+RELEASE_DATE=%Y-%m-%d %H:%M:%S %Z" >> $GITHUB_ENV

      - name: Generate Changelog
        id: generate_changelog
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0)
          
          CHANGELOG=$(git log ${LAST_TAG}..HEAD --pretty=format:"• %s")
          
          if [ -z "$CHANGELOG" ]; then
            CHANGELOG="• Brak zmian."
          fi
          
          echo "CHANGELOG<<EOF" >> $GITHUB_ENV
          echo "$CHANGELOG" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
      - name: Fetch all releases from JIRA
        id: fetch_releases
        uses: fjogeleit/http-request-action@v1
        with:
          url: '${{ secrets.JIRA_URL }}/rest/api/3/project/${{ secrets.JIRA_PROJECT_ID }}/versions'
          method: 'GET'
          username: ${{ secrets.JIRA_USER }}
          password: ${{ secrets.JIRA_TOKEN }}

      - name: Extract release ID
        id: extract_release_id
        run: |
          RELEASE_NAME="[BACKEND] v${{ env.VER }}"
          echo "Searching for release: $RELEASE_NAME"
          RELEASE_ID=$(echo '${{ steps.fetch_releases.outputs.response }}' | jq -r --arg NAME "$RELEASE_NAME" '.[] | select(.name == $NAME) | .id')
          
          if [ -z "$RELEASE_ID" ]; then
            echo "Release $RELEASE_NAME not found in JIRA!"
            exit 1
          fi
          echo "RELEASE_ID=$RELEASE_ID" >> $GITHUB_ENV

      - name: Mark Release as Released in JIRA
        uses: fjogeleit/http-request-action@v1
        with:
          url: '${{ secrets.JIRA_URL }}/rest/api/3/version/${{ env.RELEASE_ID }}'
          method: 'PUT'
          contentType: 'application/json'
          data: |
            {
              "released": true
            }
          username: ${{ secrets.JIRA_USER }}
          password: ${{ secrets.JIRA_TOKEN }}          

      - name: Hotfix merge to develop
        if: contains(github.event.head_commit.message, 'hotfix/')
        run: |
          echo "Commit message: hotfix/${VER}"
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git fetch --all
          git checkout develop
          git pull origin develop
          git merge origin/hotfix/${VER} --no-ff -m "Merge hotfix branch into develop: ${{ env.VER }}"
          git push origin develop
