name: CI/CD

on:
  pull_request:
    types: [labeled, unlabeled, opened, synchronize]
  push:
    branches:
      - develop
  issue_comment:
    types: [created]
    
permissions: write-all

concurrency:
  group: 'ci_cd'
  cancel-in-progress: false
  
jobs:
  ci_cd:
    runs-on: ubuntu-latest
    if: >
      (github.event_name == 'pull_request' &&
        github.event.pull_request.base.ref == 'develop' &&
        github.event.pull_request.head.ref != 'main')
      ||
      (github.event_name == 'pull_request' &&
        github.event.pull_request.base.ref == 'main' &&
        startsWith(github.event.pull_request.head.ref, 'hotfix/'))
      ||
      (github.event_name == 'push' &&
        github.ref == 'refs/heads/develop')
      ||
      (github.event_name == 'issue_comment' &&
        github.event.comment.body == '/ping' &&
        github.event.issue.pull_request)
        
    steps:
      - name: Get data Pull Request
        if: github.event_name == 'issue_comment' && github.event.comment.body == '/ping'
        uses: actions/github-script@v6
        id: get_pr
        with:
          script: |
            const prUrl = context.payload.issue.pull_request.url;
            const prNumber = context.payload.issue.number;
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });
            console.log('PR DATA', pr);
            
            core.setOutput('title', pr.title);
            core.setOutput('html_url', pr.html_url);
            core.setOutput('user_login', pr.user.login);

      - name: Assign PR creator
        if: github.event_name == 'pull_request' && github.event.action == 'opened'
        uses: actions/github-script@v6
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            const prCreator = context.payload.pull_request.user.login;
            
            await github.rest.issues.addAssignees({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              assignees: [prCreator]
            });
      
      - name: Microsoft Teams Notification
        uses: skitionek/notify-microsoft-teams@master
        if: github.event_name == 'issue_comment' && github.event.comment.body == '/ping'
        with:
          webhook_url: ${{ secrets.MSTEAMS_WEBHOOK_PR }}
          raw: >-
            {
              "type": "message",
              "attachments":
                [
                  {
                    "contentType": "application/vnd.microsoft.card.adaptive",
                    "content":
                      {
                        "type": "AdaptiveCard",
                        "version": "1.5",
                        "body":
                          [
                            {
                              "type": "ColumnSet",
                              "columns": [
                                {
                                  "type": "Column",
                                  "width": "stretch",
                                  "items": [
                                    {
                                      "type": "TextBlock",
                                      "text": "${{ steps.get_pr.outputs.title }}",
                                      "weight": "Bolder",
                                      "size": "Large",
                                      "color": "Accent"
                                    }
                                  ]
                                },
                                {
                                  "type": "Column",
                                  "width": "auto",
                                  "items": [
                                    {
                                      "type": "Image",
                                      "url": "https://img.icons8.com/?size=100&id=33282&format=png&color=000000",
                                      "size": "Small",
                                      "horizontalAlignment": "Right",
                                      "altText": "Zielona Fajka"
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "TextBlock",
                              "text": "Prośba o CR: [Link do PR](${{ steps.get_pr.outputs.html_url }})",
                              "wrap": true,
                              "size": "Medium"
                            },
                            {
                              "type": "TextBlock",
                              "text": "Twórca PR: ${{ steps.get_pr.outputs.user_login }}",
                              "wrap": true,
                              "size": "Medium"
                            }
                          ],
                      "msteams": {
                          "width": "Full"
                      },
                        "actions": []
                      }
                  }
                ]
            }

      - name: Remove labels, approve CR1 and CR2
        if: github.event_name == 'pull_request' && (github.event.action != 'labeled' && github.event.action != 'unlabeled')
        uses: actions/github-script@v6
        with:
          script: |
            const issue_number = context.payload.pull_request.number;
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            
            const labelsToRemove = ['CR1', 'CR2', 'APPROVAL'];
            
            for (const label of labelsToRemove) {
              try {
                await github.rest.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue_number,
                  name: label
                });
              } catch (error) {
              }
            }
            
            try {
              const reviewsResponse = await github.rest.pulls.listReviews({
                owner,
                repo,
                pull_number: issue_number,
              });

              const reviews = reviewsResponse.data;

              for (const review of reviews) {
                if (review.state === 'APPROVED') {
                  await github.rest.pulls.dismissReview({
                    owner,
                    repo,
                    pull_number: issue_number,
                    review_id: review.id,
                    message: 'Automatyczne cofnięcie zatwierdzenia.'
                  });
                }
              }
            } catch (error) {
              console.error('Błąd podczas cofania recenzji:', error);
            }

      - name: Check Labels
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            const { owner, repo } = context.repo;
            
            const prBranch = context.payload.pull_request.head.ref;
            const isHotfixBranch = prBranch.startsWith('hotfix');
            
            const { data: prLabels } = await github.rest.issues.listLabelsOnIssue({
              owner,
              repo,
              issue_number: prNumber,
            });
            
            const prLabelNames = prLabels.map(label => label.name);
            const hasCRLabel = prLabelNames.some(name => /CR/.test(name));
            
            if (!hasCRLabel && prLabelNames.includes('APPROVAL')) {
              try {
                await github.rest.issues.removeLabel({
                  owner,
                  repo,
                  issue_number: prNumber,
                  name: 'APPROVAL'
                });
                console.log('Usunięto etykietę APPROVAL, ponieważ brakuje etykiet zawierających "CR".');
              } catch (error) {
                  console.error('Nie udało się usunąć etykiety APPROVAL:', error);
                }
              }

            
            const bypassLabels = ['Do Merge'];
            const hasBypassLabel = prLabels.some(label => bypassLabels.includes(label.name));
            if (hasBypassLabel) {
              console.log('PR posiada etykietę umożliwiającą pominięcie innych sprawdzeń.');
              return;
            }

            if (!isHotfixBranch) {
              const hasDocumentationLabel = prLabels.some(label => label.name === 'Documentation' || label.name === 'Not Documentation');
              if (!hasDocumentationLabel) {
                core.setFailed('PR musi mieć etykietę DOCUMENTATION lub NOT DOCUMENTATION.');
              }
            } else {
              console.log('Gałąź hotfix, nie sprawdzam etykiet DOCUMENTATION.');
            }
            
            const requiredLabels = ['QA Dev', 'CR1', 'CR2'];
            requiredLabels.forEach(label => {
              const hasLabel = prLabels.some(prLabel => prLabel.name === label);

              if (!hasLabel) {
                core.setFailed(`PR nie ma wymaganej etykiety ${label}.`);
              }
            });

            // Pobranie listy wydarzeń związanych z PR
            const events = await github.rest.issues.listEventsForTimeline({
              owner,
              repo,
              issue_number: prNumber,
            });
            events.data.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));

            requiredLabels.forEach(label => {
              const labelAddEvent = events.data.find(event => event.event === 'labeled' && event.label.name === label && event.actor.login === context.actor);
              const labelRemoveEvent = events.data.find(event => event.event === 'unlabeled' && event.label.name === label && event.actor.login === context.actor);
              if (labelAddEvent && labelAddEvent.actor.login === context.payload.pull_request.user.login) {
                if (!labelRemoveEvent || labelAddEvent.created_at > labelRemoveEvent.created_at) {
                  core.setFailed(`Nie można samemu sobie nadać labelki ${label}.`);
                }
              }
            });

      - name: Checkout repository
        if: github.event_name == 'pull_request'
        uses: actions/checkout@v3

      - name: Set up PHP
        if: github.event_name == 'pull_request'
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          tools: composer

      - name: Install dependencies via Composer
        if: github.event_name == 'pull_request'
        run: composer install

      - name: Run cs fixer
        if: github.event_name == 'pull_request'
        run: composer run-script lint
        
      - name: Run Migrations for Testing
        run: php artisan migrate --env=testing
          
      - name: Run GrumPHP
        if: github.event_name == 'pull_request'
        run: |
          vendor/bin/grumphp run

      - name: Deploy to Server Dev and Pre
        if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /var/www/test/demo-repository
            git checkout ${{ secrets.MAIN_BRANCH }}
            git pull
            composer install --ignore-platform-req=ext-xdebug --ignore-platform-req=ext-ldap
            php artisan migrate
            php artisan config:clear

